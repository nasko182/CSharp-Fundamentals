using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Text.RegularExpressions;

namespace ConsoleApp1
{
    class Car
    {
        public Car(string car, int milliage, int fuel)
        {
            this.CarType = car;
            this.Milieage = milliage;
            this.Fuel = fuel;
        }
        public string CarType { get; set; } = string.Empty;

        public int Milieage { get; set; } = 0;

        public int Fuel { get; set; } = 0;
    }
    class Program
    {
        static void Main(string[] args)
        {
            int n = int.Parse(Console.ReadLine());
            List<Car> cars = new List<Car>();
            for (int i = 0; i < n; i++)
            {
                string[] inputCars = Console.ReadLine().Split('|');
                string car = inputCars[0];
                int milliage = int.Parse(inputCars[1]);
                int fuel = int.Parse(inputCars[2]);
                Car newCar = new Car(car, milliage, fuel);
                cars.Add(newCar);
            }
            string command;
            while ((command = Console.ReadLine()) != "Stop")
            {
                string[] cmdArgs = command.Split(" : ");
                string action = cmdArgs[0];
                if (action == "Drive")
                {
                    Drive(cmdArgs, cars);
                }
                else if (action == "Refuel")
                {
                    Refuel(cmdArgs, cars);
                }
                else if (action == "Revert")
                {
                    Revert(cmdArgs, cars);
                }
            }
            foreach (var car in cars)
            {
                Console.WriteLine($"{car.CarType} -> Mileage: {car.Milieage} kms, Fuel in the tank: {car.Fuel} lt.");
            }
        }
        static void Drive(string[] cmdArgs, List<Car> cars)
        {
            string car = cmdArgs[1];
            int distance = int.Parse(cmdArgs[2]);
            int fuel = int.Parse(cmdArgs[3]);
            Car currentCar = cars.Find(c => c.CarType == car);
            if (currentCar.Fuel < fuel)
            {
                Console.WriteLine($"Not enough fuel to make that ride");
            }
            else
            {
                currentCar.Milieage += distance;
                currentCar.Fuel -= fuel;
                Console.WriteLine($"{car} driven for {distance} kilometers. {fuel} liters of fuel consumed.");
            }
            if (currentCar.Milieage >= 100000)
            {
                cars.Remove(currentCar);
                Console.WriteLine($"Time to sell the {car}!");
            }
        }

        static void Refuel(string[] cmdArgs, List<Car> cars)
        {
            string car = cmdArgs[1];
            int fuel = int.Parse(cmdArgs[2]);
            Car currentCar = cars.Find(c => c.CarType == car);
            int currentFuel = currentCar.Fuel;
            if (currentCar.Fuel + fuel < 75)
            {
                currentCar.Fuel += fuel;
            }
            else
            {
                currentCar.Fuel = 75;
            }
            Console.WriteLine($"{car} refueled with {currentCar.Fuel - currentFuel} liters");
        }
        static void Revert(string[] cmdArgs, List<Car> cars)
        {
            string car = cmdArgs[1];
            int kilometers = int.Parse(cmdArgs[2]);
            Car currentCar = cars.Find(c => c.CarType == car);
            if (currentCar.Milieage - kilometers < 10000)
            {
                currentCar.Milieage = 10000;
            }
            else
            {
                currentCar.Milieage -= kilometers;
                Console.WriteLine($"{car} mileage decreased by {kilometers} kilometers");
            }
        }
    }
}
